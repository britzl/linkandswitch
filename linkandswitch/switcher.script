local switcher = require "linkandswitch.switcher"
local block = require "linkandswitch.block"
local linker = require "linkandswitch.linker"
local flow = require "linkandswitch.flow"

local COLLISION_RESPONSE = hash("collision_response")
local GROUP_TOUCH = hash("touch")

local BLOCKS = hash("blocks")

local function post_to_board(message_id, message)
	msg.post("switcher:/board/board#script", message_id, message or {})
end

function init(self)
	msg.post(".", "acquire_input_focus")
	self.switcher = switcher.create()
	self.linker = linker.create(true, 2)
	self.board_stable = true
end

function final(self)
	msg.post(".", "release_input_focus")
end

function update(self, dt)
	flow.update()
	-- if we transition from an unstable to a stable board we
	-- check for matches
	local stable = go.get("switcher:/board/board#script", "stable")
	if stable and not self.board_stable and not self.board then
		flow.start(function()
			post_to_board("get_blocks")
			local message_id, message = flow.until_message(BLOCKS)
			self.switcher.update(message)
			self.switcher.delete_matches()
		end)
	end
	self.board_stable = stable
end

function on_message(self, message_id, message, sender)
	flow.on_message(message_id, message, sender)
	if message_id == COLLISION_RESPONSE and message.group == GROUP_TOUCH then
		if self.switching then
			self.linker.try_to_add(message.other_id)
		end
	end
end

function on_input(self, action_id, action)
	if action.x and action.y then
		go.set_position(vmath.vector3(action.x, action.y, 0))
	end
	
	if not self.board_stable then
		return
	end
	if action.pressed then
		self.switching = true
	elseif action.released then
		if self.linker.length() >= 2 then
			post_to_board("pause")
			flow.start(function()
				local a = self.linker.get(1)
				local b = self.linker.get(2)
				local duration = 0.3
				go.animate(a.id, "position", go.PLAYBACK_ONCE_FORWARD, go.get_position(b.id), go.EASING_INOUTCIRC, duration, 0)
				go.animate(b.id, "position", go.PLAYBACK_ONCE_FORWARD, go.get_position(a.id), go.EASING_INOUTCIRC, duration, 0)
				flow.delay(duration)
				post_to_board("get_blocks")
				local message_id, message = flow.until_message(BLOCKS)
				self.switcher.update(message)
				if self.switcher.has_matches() then
					self.switcher.delete_matches()
				else
					go.animate(a.id, "position", go.PLAYBACK_ONCE_FORWARD, go.get_position(b.id), go.EASING_INOUTCIRC, duration, 0)
					go.animate(b.id, "position", go.PLAYBACK_ONCE_FORWARD, go.get_position(a.id), go.EASING_INOUTCIRC, duration, 0)
					flow.delay(duration)
				end
				post_to_board("resume")
				self.switching = false
				self.linker.remove_all()
			end)
		else
			self.linker.remove_all()
			self.switching = false
		end
	end
end
