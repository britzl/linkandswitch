go.property("color", hash("blue"))
go.property("falling", false)
go.property("board", msg.url())
go.property("left", hash("")) -- id of the block to the left of this block
go.property("right", hash("")) -- id of the block to the right of this block
go.property("up", hash("")) -- id of the block above this block
go.property("down", hash("")) -- id of the block below this block

local COLLISION_RESPONSE = hash("collision_response")
local CONTACT_POINT_RESPONSE = hash("contact_point_response")
local SELECT = hash("select")
local DESELECT = hash("deselect")
local DELETED_LEFT = hash("deleted_left") -- posted when a neighbouring block is deleted
local DELETED_RIGHT = hash("deleted_right") -- posted when a neighbouring block is deleted
local DELETED_UP = hash("deleted_up") -- posted when a neighbouring block is deleted
local DELETED_DOWN = hash("deleted_down") -- posted when a neighbouring block is deleted
local PAUSE = hash("pause")
local RESUME = hash("resume")

local GROUP_BLOCK_ABOVE = hash("block_above")
local GROUP_GROUND = hash("ground")
local GROUP_LEFT = hash("left")
local GROUP_RIGHT = hash("right")
local GROUP_UP = hash("up")
local GROUP_DOWN = hash("down")

local EMPTY_HASH = hash("")

function init(self)
	msg.post("#sprite", "play_animation", { id = self.color })
	self.acc = vmath.vector3()
end

function final(self)
	msg.post(self.board, "deleted")
	if self.left ~= EMPTY_HASH then msg.post(self.left, DELETED_RIGHT) end
	if self.right ~= EMPTY_HASH then msg.post(self.right, DELETED_LEFT) end
	if self.up ~= EMPTY_HASH then msg.post(self.up, DELETED_DOWN) end
	if self.down ~= EMPTY_HASH then msg.post(self.down, DELETED_UP) end
end

function update(self, dt)
	if self.pause then
		return
	end
	
	if not self.contact then
		self.acc.y = math.min(self.acc.y + 50 * dt, 120)
		go.set_position(go.get_position() - self.acc)
		msg.post(self.board, "falling")
		self.falling = true
		self.up = EMPTY_HASH
		self.down = EMPTY_HASH
		self.left = EMPTY_HASH
		self.right = EMPTY_HASH
	else
		self.falling = false
		self.acc.y = 0	
	end
	self.contact = nil
end

function on_message(self, message_id, message, sender)
	if message_id == DELETED_UP then
		self.up = EMPTY_HASH
	elseif message_id == DELETED_DOWN then
		self.down = EMPTY_HASH
	elseif message_id == DELETED_LEFT then
		self.left = EMPTY_HASH
	elseif message_id == DELETED_RIGHT then
		self.right = EMPTY_HASH
	elseif message_id == SELECT then
		go.set("#sprite", "tint", vmath.vector4(1.2, 1.2, 1.2, 1))
	elseif message_id == DESELECT then
		go.set("#sprite", "tint", vmath.vector4(1, 1, 1, 1))
	elseif message_id == PAUSE then
		self.pause = true
	elseif message_id == RESUME then
		self.pause = false
	elseif message_id == COLLISION_RESPONSE then
		if message.group == GROUP_UP then
			self.down = message.other_id
		elseif message.group == GROUP_DOWN then
			self.up = message.other_id
		elseif message.group == GROUP_LEFT then
			self.right = message.other_id
		elseif message.group == GROUP_RIGHT then
			self.left = message.other_id
		end
	elseif not self.pause then
		if message_id == CONTACT_POINT_RESPONSE then
			if message.group == GROUP_BLOCK_ABOVE or message.group == GROUP_GROUND then
				go.set_position(go.get_position() + (message.normal * message.distance))
				self.contact = true
			end
		end
	end
end
