go.property("stable", true)

local colors = { hash("orange"), hash("pink"), hash("yellow"), hash("green") }
--local colors = { hash("orange"), hash("pink"), hash("yellow"), hash("green"), hash("blue") }
--local colors = { hash("orange"), hash("pink"), hash("yellow") }

local FALLING = hash("falling") -- posted from block to board when the block is falling
local DELETED = hash("deleted") -- posted from block to board when the block is deleted
local SPAWN = hash("spawn") --  posted to board when a block should be spawned
local GET_BLOCKS = hash("get_blocks") -- posted to board to request a list of the current blocks
local PAUSE = hash("pause") -- posted to the board to pause all blocks
local RESUME = hash("resume") -- posted to the board to let blocks continue to fall


--- Spawn a block of a random color at a specific position
local function spawn_block(self, position)
	local color = colors[math.random(1, #colors)]
	local block_id = factory.create("#blockfactory", position, nil, { color = color, board = msg.url() }, 1.0)
	msg.post(block_id, "set_parent", { parent_id = go.get_id() })
	table.insert(self.blocks, { id = block_id, color = color, url = msg.url(block_id), script = msg.url(nil, block_id, "script") })
end

function init(self)
	math.randomseed(os.time())
	self.blocks = {}
end

function final(self)
	for _,block in pairs(self.blocks) do
		go.delete(block.id)
	end 
end

function update(self, dt)
	self.stable = true
end

function on_message(self, message_id, message, sender)
	if message_id == FALLING then
		self.stable = false
	elseif message_id == DELETED then
		for i,block in pairs(self.blocks) do
			if block.url.path == sender.path then
				table.remove(self.blocks, i)
				return
			end
		end
	elseif message_id == SPAWN then
		spawn_block(self, message.position)
	elseif message_id == GET_BLOCKS then
		local ids = {}
		for _,b in pairs(self.blocks) do
			table.insert(ids, b.id)
		end
		msg.post(sender, "blocks", ids)
	elseif message_id == PAUSE then
		for _,b in pairs(self.blocks) do
			msg.post(b.id, "pause")
		end
	elseif message_id == RESUME then
		for _,b in pairs(self.blocks) do
			msg.post(b.id, "resume")
		end
	end
end
